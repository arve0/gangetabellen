{"version":3,"sources":["../src/reducer.test.js"],"names":[],"mappings":"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","file":"reducer.test.js","sourcesContent":["import reducer from './reducer.js'\nimport test from 'ava'\nimport {\n\tsetInfo, startTest, testCorrectAnswer, testDone,\n\tstartRound,\n\tsetQuestion, questionInput\n} from './actions.js'\n\ntest(setInfo().type, (t) => {\n\tlet state = reducer()\n\tt.truthy(state.info)\n\n\tstate = reducer(state, setInfo({ text: 'asdf', nextState: 'fff' }))\n\n\tt.true(state.mode === 'info')\n\tt.true(state.info.text === 'asdf')\n\tt.true(state.info.nextState === 'fff')\n})\n\ntest(startTest().type, (t) => {\n\tlet state = reducer()\n\tt.truthy(state.test)\n\n\tstate = reducer(state, startTest([{x: 1, y: 2}]))\n\n\tt.true(state.mode === 'test')\n\tt.true(state.test.questions.length === 1)\n\tt.true(state.test.questions[0].x === 1)\n\tt.truthy(state.test.questions[0].startTime)\n\tt.true(state.test.questions[0].startTime <= Date.now())\n})\n\ntest(testCorrectAnswer().type, async (t) => {\n\tlet state = reducer()\n\tstate = reducer(state, startTest([{ x: 1, y: 2, answer: '2' }, { x: 2, y: 2, answer: '4' }]))\n\tstate = reducer(state, questionInput(state.test.questions[0].answer))\n\tawait sleep()\n\tlet startTime = Date.now()\n\tstate = reducer(state, testCorrectAnswer())\n\n\tt.deepEqual(state.test.questions[0], { x: 2, y: 2, answer: '4', startTime })\n\tt.true(state.test.answered.length === 1)\n\tt.truthy(state.test.answered[0].time)\n\tt.true(state.input === '')\n\n\tawait sleep()\n\tstate = reducer(state, testCorrectAnswer())\n\tt.truthy(state.test.answered[1].time)\n})\n\ntest(testDone().type, (t) => {\n\tlet state = reducer()\n\tstate = reducer(state, startTest([{ x: 1, y: 2, answer: '2' }, { x: 2, y: 2, answer: '4' }]))\n\tstate = reducer(state, testCorrectAnswer())\n\tstate = reducer(state, testCorrectAnswer())\n\tstate = reducer(state, testDone())\n\n  t.regex(state.info.text, /Testen er ferdig./)\n})\n\ntest(setQuestion().type, (t) => {\n\tlet state = reducer()\n\tt.true(state.questions.length === 100)\n\n\tstate = reducer(state, setQuestion(10))\n\n\tt.true(state.currentQuestion === 10)\n})\n\ntest(questionInput().type, (t) => {\n\tlet state = reducer()\n\tt.true(state.input === '')\n\n\tstate = reducer(state, questionInput('1'))\n\n\tt.true(state.input === '1')\n})\n\ntest(questionInput().type + ': backspace', (t) => {\n\tlet state = reducer()\n\n\tstate = reducer(state, questionInput('1'))\n\tt.true(state.input === '1')\n\tstate = reducer(state, questionInput('1', { name: 'backspace' }))\n\n\tt.true(state.input === '')\n})\n\ntest(startRound().type, (t) => {\n\tlet state = reducer()\n\tstate = reducer(state, startRound())\n\n\tt.true(state.mode === 'round')\n})\n\n// test('Moves questions upon correct answer', (t) => {\n// \tlet state = reducer()\n// \tconst questions = state.questions\n\n// \t// move all to next bin\n// \tquestions.map(question => {\n// \t\tstate = reducer(state, {\n// \t\t\ttype: 'QUESTION',\n// \t\t\tquestion\n// \t\t})\n// \t\tquestion.answer.split('').map(input => {\n// \t\t\tstate = reducer(state, {type: 'QUESTION_INPUT', input})\n// \t\t})\n// \t})\n\n// \tt.true(state.bins[0].length === 0)\n\n// \t// move one to next bin\n// \tstate = reducer(state, {\n// \t\ttype: 'QUESTION',\n// \t\tquestion: state.bins[1][10]\n// \t})\n// \tstate.question.answer.split('').map(input => {\n// \t\tstate = reducer(state, {type: 'QUESTION_INPUT', input})\n// \t})\n\n// \tt.true(state.bins[0].length === 0)\n// \tt.true(state.bins[1].length === 99)\n// \tt.true(state.bins[2].length === 1)\n// })\n\nfunction sleep (time = 1) {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, time)\n\t})\n}"]}