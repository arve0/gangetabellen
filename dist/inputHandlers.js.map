{"version":3,"sources":["../src/inputHandlers.js"],"names":[],"mappings":";;;;;;;;QAOgB,Y,GAAA,Y;;AAPhB;;AACA;;AAMO,SAAS,YAAT,CAAuB,KAAvB,EAA8B;AACpC,QAAO,UAAC,GAAD,EAAM,GAAN,EAAc;;AAEpB,MAAI,IAAI,IAAJ,IAAY,IAAI,IAAJ,KAAa,GAA7B,EAAkC;AACjC,WAAQ,IAAR,CAAa,QAAQ,GAArB,EAA0B,QAA1B;AACA;;AAJmB,wBAKG,MAAM,QAAN,EALH;;AAAA,MAKZ,IALY,mBAKZ,IALY;AAAA,MAKN,IALM,mBAKN,IALM;;AAMpB,MAAI,SAAS,MAAT,IAAmB,KAAK,SAAL,KAAmB,MAA1C,EAAkD;;AAEjD,OAAM,gBAAgB,iBAAiB,MAAM,QAAN,GAAiB,SAAlC,CAAtB;AACA,SAAM,QAAN,CAAe,wBAAU,aAAV,CAAf;AACA,GAJD,MAIO,IAAI,SAAS,MAAb,EAAqB;;AAE3B,SAAM,QAAN,CAAe,4BAAc,GAAd,EAAmB,GAAnB,CAAf;;AAF2B,0BAGH,MAAM,QAAN,EAHG;;AAAA,OAGnB,KAHmB,oBAGnB,KAHmB;AAAA,OAGZ,IAHY,oBAGZ,IAHY;;AAI3B,OAAI,UAAU,KAAK,SAAL,CAAe,CAAf,EAAkB,MAAhC,EAAwC;;AAEvC;AACA,UAAM,QAAN,CAAe,iCAAf;AACA;AACD,OAAI,MAAM,QAAN,GAAiB,IAAjB,CAAsB,SAAtB,CAAgC,MAAhC,KAA2C,CAA/C,EAAkD;;AAEjD,UAAM,QAAN,CAAe,wBAAf;AACA;AACD,GAbM,MAaA,IAAI,SAAS,MAAT,IAAmB,KAAK,SAAL,KAAmB,OAA1C,EAAmD;;AAEzD,SAAM,QAAN,CAAe,0BAAf;AACA,GAHM,MAGA,IAAI,SAAS,OAAb,EAAsB;;AAE5B,GAFM,MAEA;AACN,UAAM,QAAN,CAAe,4BAAc,GAAd,EAAmB,GAAnB,CAAf;;AADM,2BAE4B,MAAM,QAAN,EAF5B;;AAAA,QAEE,MAFF,oBAEE,KAFF;AAAA,QAES,QAFT,oBAES,QAFT;AAAA,QAEmB,IAFnB,oBAEmB,IAFnB;;AAGN,QAAI,WAAU,SAAS,MAAvB,EAA+B;AAC9B;AACA,SAAM,cAAc,mBAAmB,KAAK,CAAL,CAAnB,CAApB;AACA,WAAM,QAAN,CAAe,0BAAY,WAAZ,CAAf;AACA;AACD;AACD,EArCD;AAsCA;;AAED,SAAS,kBAAT,CAA6B,GAA7B,EAAkC;AACjC,KAAM,iBAAiB,KAAK,KAAL,CAAW,IAAI,MAAJ,GAAa,KAAK,MAAL,EAAxB,CAAvB;AACA,QAAO,IAAI,cAAJ,CAAP;AACA;;AAED,SAAS,gBAAT,CAA2B,GAA3B,EAAgC;AAC/B,KAAI,OAAO,IAAI,MAAJ,CAAW,UAAC,CAAD;AAAA,SAAO,EAAE,CAAF,GAAM,CAAN,IAAW,EAAE,CAAF,GAAM,CAAjB,IAAsB,EAAE,MAAF,GAAW,EAAxC;AAAA,EAAX,CAAX;AACA,KAAI,YAAY,EAAhB;;AAF+B,4BAGtB,CAHsB;;AAK9B,MAAI,IAAI,mBAAmB,IAAnB,CAAR;AACA,SAAO,KAAK,MAAL,CAAY,UAAC,EAAD;AAAA,UAAQ,OAAO,CAAf;AAAA,GAAZ,CAAP;AACA,YAAU,IAAV,cAAoB,CAApB;AAP8B;;AAG/B,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AAAA,QAApB,CAAoB;AAK5B;AACD,QAAO,SAAP;AACA","file":"inputHandlers.js","sourcesContent":["import { correct } from './sounds.js'\nimport {\n\tstartTest, testCorrectAnswer, testDone,\n\tstartRound,\n\tquestionInput, setQuestion\n} from './actions.js'\n\nexport function inputHandler (store) {\n\treturn (str, key) => {\n\t\t// Ctrl + C\n\t\tif (key.ctrl && key.name === 'c') {\n\t\t\tprocess.kill(process.pid, 'SIGINT')\n\t\t}\n\t\tconst { mode, info } = store.getState()\n\t\tif (mode === 'info' && info.nextState === 'test') {\n\t\t\t// start test\n\t\t\tconst testQuestions = getTestQuestions(store.getState().questions)\n\t\t\tstore.dispatch(startTest(testQuestions))\n\t\t} else if (mode === 'test') {\n\t\t\t// test answer\n\t\t\tstore.dispatch(questionInput(str, key))\n\t\t\tconst { input, test } = store.getState()\n\t\t\tif (input === test.questions[0].answer) {\n\t\t\t\t// correct test answer\n\t\t\t\tcorrect()\n\t\t\t\tstore.dispatch(testCorrectAnswer())\n\t\t\t}\n\t\t\tif (store.getState().test.questions.length === 0) {\n\t\t\t\t// test done\n\t\t\t\tstore.dispatch(testDone())\n\t\t\t}\n\t\t} else if (mode === 'info' && info.nextState === 'round') {\n\t\t\t// start round\n\t\t\tstore.dispatch(startRound())\n\t\t}\telse if (mode === 'round') {\n\t\t\t// round answer\n\t\t} else {\n\t\t\tstore.dispatch(questionInput(str, key))\n\t\t\tconst { input, question, bins } = store.getState()\n\t\t\tif (input === question.answer) {\n\t\t\t\tcorrect()\n\t\t\t\tconst newQuestion = pickRandomQuestion(bins[0])\n\t\t\t\tstore.dispatch(setQuestion(newQuestion))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction pickRandomQuestion (bin) {\n\tconst randomQuestion = Math.floor(bin.length * Math.random())\n\treturn bin[randomQuestion]\n}\n\nfunction getTestQuestions (bin) {\n\tlet pool = bin.filter((q) => q.x > 1 && q.x < 6 && q.answer < 40)\n\tlet questions = []\n\tfor (let i = 0; i < 10; ++i) {\n\t\t// copy question into array\n\t\tlet q = pickRandomQuestion(pool)\n\t\tpool = pool.filter((qq) => qq !== q)\n\t\tquestions.push({ ...q })\n\t}\n\treturn questions\n}\n"]}