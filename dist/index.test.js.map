{"version":3,"sources":["../src/index.test.js"],"names":[],"mappings":"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","file":"index.test.js","sourcesContent":["const test = require('ava')\nconst fork = require('child_process').fork\n\nlet context\ntest.before((t) => {\n\tconst CMD = 'index.js'\n\t// silent: true -> do not pipe child.stdout to process.stdout\n\tconst child = fork(CMD, [], { silent: true })\n\n\t// keep output history in an array\n\tconst stdout = []\n\tchild.stdout.setEncoding('utf8')\n\tchild.stdout.on('data', (d) => {\n\t\tstdout.push(d)\n\t})\n\n\tchild.stderr.on('data', (d) => {\n\t\tthrow new Error(d)\n\t})\n\n\t// access child and stdout array from tests\n\tcontext = { child, stdout }\n})\n\ntest.after((t) => {\n\t// terminate child\n\tif (context.child.connected) {\n\t\tcontext.child.disconnect()\n\t}\n})\n\n/**\n * plan:\n * 1. keep history of data\n * 2. test length of data array\n * 3. test contents of data array\n * 4. send response\n * 5. expect new data in array\n * 6. continue\n */\n\n/**\n * These tests will run serially.\n * You can run them concurrently by using `test((t) => { ... })`.\n */\ntest.serial('gets a welcome message', async (t) => {\n\tconst { stdout } = context\n\tlet output = await waitFor(stdout)\n\t// console.log(output)\n\tt.regex(output, 'Velkommen', 'Did not get welcome message.')\n})\n\ntest.serial('gets a question after the welcome message', async (t) => {\n\tconst { stdout, child } = context\n\t// press any key\n\tchild.stdin.write('n')\n\t// expected: num x num =\n\tlet output = await waitFor(stdout)\n\tt.notThrows(() => matchQuestion(output))\n})\n\ntest.serial('if correct answer, gets a new question', async (t) => {\n\tconst { stdout, child } = context\n\t// answer first question\n\tlet firstQuestion = last(stdout)\n\tlet answer = getAnswer(firstQuestion)\n\tchild.stdin.write(answer)\n\n\t// get next question\n\tlet nextQuestion = await waitFor(stdout)\n\n\tt.notThrows(() => matchQuestion(nextQuestion))\n\tt.true(firstQuestion != nextQuestion)\n})\n\ntest.serial('initially get no more than ten questions', async (t) => {\n\tconst { stdout, child } = context\n\t// answer nine questions\n\tfor (var i = 0; i < 9; ++i) {\n\t\toutput = await waitFor(stdout)\n\t\tlet answer = getAnswer(output)\n\t\tchild.stdin.write(answer)\n\t}\n\toutput = await waitFor(stdout)\n\tt.notThrows(() => matchQuestion(output))\n})\n\n/**\n * Helper functions.\n */\nfunction waitFor (what, timeout) {\n\ttimeout = timeout ||Â 1000\n\tlet initial = what.length\n\treturn new Promise((resolve, reject) => {\n\t\tlet interval = setInterval(() => {\n\t\t\tif (initial !== what.length) {\n\t\t\t\tresolve(last(what))\n\t\t\t}\n\t\t}, 10)  // check every 10 ms\n\t\tsetTimeout(reject, timeout)\n\t})\n}\n\nfunction last (arr) {\n\treturn arr.slice(arr.length - 1)[0]\n}\n\nfunction matchQuestion (q) {\n\tlet r = new RegExp('([0-9]+) x ([0-9]+) \\=')\n\tlet m = q.match(r)\n\tif (!m || m.length !== 3) {\n\t\tthrow new Error(q + ' not an question of the form `3 x 3 =`')\n\t}\n\treturn m\n}\n\nfunction getAnswer (q) {\n\tlet m = matchQuestion(q)\n\treturn `${m[1] * m[2]}`\n}\n"]}