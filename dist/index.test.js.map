{"version":3,"sources":["../src/index.test.js"],"names":[],"mappings":"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","file":"index.test.js","sourcesContent":["const test = require('ava')\nconst ttyTestHelper = require('tty-test-helper')\n\nlet context\ntest.before((t) => {\n\tconst CMD = 'index.js'\n\tcontext = ttyTestHelper(__dirname + '/' + CMD, {\n\t\tdebug: false\n\t})\n})\n\ntest.after((t) => {\n\t// terminate child\n\tif (context.child.connected) {\n\t\tcontext.child.disconnect()\n\t}\n})\n\n/**\n * These tests will run serially.\n * You can run them concurrently by using `test((t) => { ... })`.\n */\ntest.serial('gets a welcome message', async (t) => {\n\tconst { stdout, waitFor } = context\n\treturn waitFor('Velkommen', stdout)\n})\n\ntest.serial('gets a question after the welcome message', async (t) => {\n\tconst { stdout, stdin, waitFor } = context\n\t// press any key\n\tstdin.write('n')\n\t// expected: num x num =\n\tlet output = await waitFor('x')\n\tt.notThrows(() => matchQuestion(output))\n})\n\ntest.serial('test: if correct answer, gets a new question', async (t) => {\n\tconst { stdout, stdin, waitFor, last } = context\n\t// answer first question\n\tlet firstQuestion = last(stdout)\n\tlet answer = getAnswer(firstQuestion)\n\tstdin.write(answer)\n\n\t// get next question\n\tlet nextQuestion = await waitFor('x', stdout)\n\n\tt.notThrows(() => matchQuestion(nextQuestion))\n\tt.true(firstQuestion != nextQuestion)\n})\n\ntest.serial('test: gets median time after ten questions', async (t) => {\n\tconst { stdout, stdin, last, wait } = context\n\tlet output\n\t// answer nine questions\n\tfor (var i = 0; i < 9; ++i) {\n\t\toutput = last(stdout)\n\t\tlet answer = getAnswer(output)\n\t\tstdin.write(answer)\n\t\tawait wait(100)\n\t}\n\toutput = last(stdout)\n\tt.regex(output, /regnestykkene innen 0.1 sekunder/)\n\tstdin.write('k')  // press a key to continue\n})\n\ntest.serial('game: played in rounds of 10 questions', async (t) => {\n\tconst { stdout, stdin, last, wait } = context\n\tlet output\n\t// answer ten questions\n\tfor (var i = 0; i < 10; ++i) {\n\t\toutput = last(stdout)\n\t\tlet answer = getAnswer(output)\n\t\tstdin.write(answer)\n\t\tawait wait(101)\n\t}\n\toutput = last(stdout)\n//\tt.regex(output, /Din mediantid er [0-9\\.]+ sekunder/)\n})\n\n/**\n * Helper functions.\n */\nfunction matchQuestion (q) {\n\tlet r = new RegExp('([0-9]+) x ([0-9]+) \\=')\n\tlet m = q.match(r)\n\tif (!m || m.length !== 3) {\n\t\tthrow new Error(q + ' not an question of the form `3 x 3 =`')\n\t}\n\treturn m\n}\n\nfunction getAnswer (q) {\n\tlet m = matchQuestion(q)\n\treturn `${m[1] * m[2]}`\n}\n"]}