{"version":3,"sources":["../src/reducer.js"],"names":[],"mappings":";;;;;;;;kBAawB,O;;AAbxB;;;;;;;;AAEA,IAAM,eAAe;;AAEpB,OAAM,CAAC,kCAAD,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,CAFc;AAGpB,WAAU,EAHU;AAIpB,OAAM;AACL,QAAM,EADD;AAEL,UAAQ;AAFH,EAJc;AAQpB,QAAO;AARa,CAArB;;AAWe,SAAS,OAAT,GAAqD;AAAA,KAAnC,KAAmC,yDAA3B,YAA2B;AAAA,KAAb,MAAa,yDAAJ,EAAI;;AACnE,SAAQ,OAAO,IAAf;AACC,OAAK,MAAL;AACC,uBAAY,KAAZ;AACC,UAAM,MADP;AAEC,UAAM,OAAO,IAFd;;AAID,OAAK,UAAL;AACC,OAAM,OAAO,mBAAmB,MAAM,IAAzB,EAA+B,OAAO,QAAtC,CAAb;AACA,uBAAY,KAAZ;AACC,UAAM,UADP;AAEC,cAAU,OAAO,QAFlB;AAGC,WAAO,EAHR;AAIC,cAJD;;AAMD,OAAK,gBAAL;AACC,OAAI,UAAU,sBAAsB,KAAtB,CAA4B,GAA5B,CAAd;AACA,OAAI,QAAQ,MAAM,KAAlB;AACA,OAAI,OAAO,GAAP,IAAc,OAAO,GAAP,CAAW,IAAX,KAAoB,WAAtC,EAAmD;AAClD,YAAQ,MAAM,KAAN,CAAY,KAAZ,CAAkB,CAAlB,EAAqB,MAAM,KAAN,CAAY,MAAZ,GAAqB,CAA1C,CAAR;AACA,IAFD,MAEO,IAAI,QAAQ,OAAR,CAAgB,OAAO,KAAvB,MAAkC,CAAC,CAAvC,EAA0C;AAChD,YAAQ,MAAM,KAAN,GAAc,OAAO,KAA7B;;AAEA,QAAI,UAAU,MAAM,QAAN,CAAe,MAA7B,EAAqC;AAAA;AACpC,UAAM,iBAAiB,MAAM,QAAN,CAAe,cAAf,GAAgC,CAAvD;AACA,YAAM,QAAN,gBAAsB,MAAM,QAA5B,IAAsC,8BAAtC;;AAEA,YAAM,IAAN,GAAa,MAAM,IAAN,CAAW,GAAX,CAAe,UAAC,GAAD,EAAM,CAAN,EAAY;AACvC,WAAI,MAAM,cAAV,EAA0B;AACzB,4CAAW,GAAX,IAAgB,MAAM,QAAtB;AACA;AACD,cAAO,GAAP;AACA,OALY,CAAb;AAJoC;AAUpC;AACD;AACD,uBAAY,KAAZ,IAAmB,YAAnB;AACD;AACC,UAAO,KAAP;AApCF;AAsCA;;AAED,SAAS,kBAAT,CAA6B,IAA7B,EAAmC,IAAnC,EAAyC;AACxC,QAAO,KAAK,GAAL,CAAS;AAAA,SAAY,SAAS,MAAT,CAAgB;AAAA,UAAK,MAAM,IAAX;AAAA,GAAhB,CAAZ;AAAA,EAAT,CAAP;AACA","file":"reducer.js","sourcesContent":["import generateQuestions from './generateQuestions.js'\n\nconst initialState = {\n\t// five bins with questions\n\tbins: [generateQuestions(), [], [], [], []],\n\tquestion: {},\n\tinfo: {\n\t\ttext: '',\n\t\taction: 'keypress'\n\t},\n\tinput: ''\n}\n\nexport default function reducer (state = initialState, action = {}) {\n\tswitch (action.type) {\n\t\tcase 'INFO':\n\t\t\treturn { ...state,\n\t\t\t\tmode: 'info',\n\t\t\t\tinfo: action.info }\n\n\t\tcase 'QUESTION':\n\t\t\tconst bins = removeItemFromBins(state.bins, action.question)\n\t\t\treturn { ...state,\n\t\t\t\tmode: 'question',\n\t\t\t\tquestion: action.question,\n\t\t\t\tinput: '',\n\t\t\t\tbins }\n\n\t\tcase 'QUESTION_INPUT':\n\t\t\tvar numbers = '0 1 2 3 4 5 6 7 8 9'.split(' ')\n\t\t\tlet input = state.input\n\t\t\tif (action.key && action.key.name === 'backspace') {\n\t\t\t\tinput = state.input.slice(0, state.input.length - 1)\n\t\t\t} else if (numbers.indexOf(action.input) !== -1) {\n\t\t\t\tinput = state.input + action.input\n\t\t\t\t// if correct, inc counter and add back to bin\n\t\t\t\tif (input === state.question.answer) {\n\t\t\t\t\tconst correctAnswers = state.question.correctAnswers + 1\n\t\t\t\t\tstate.question = { ...state.question, correctAnswers }\n\t\t\t\t\t// add back to one of the bins\n\t\t\t\t\tstate.bins = state.bins.map((bin, i) => {\n\t\t\t\t\t\tif (i === correctAnswers) {\n\t\t\t\t\t\t\treturn [...bin, state.question]\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn bin\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { ...state, input }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nfunction removeItemFromBins (bins, item) {\n\treturn bins.map(innerArr => innerArr.filter(i => i !== item))\n}\n"]}