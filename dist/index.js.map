{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAM,QAAQ,0CAAd;;AAEA,MAAM,SAAN,CAAgB,YAAM;AACrB,QAAO,MAAM,QAAN,EAAP;AACA,CAFD;;;AAKA,IAAM,KAAK,mBAAS,eAAT,CAAyB,QAAQ,KAAjC,EAAwC,QAAQ,MAAhD,CAAX;AACA,mBAAS,kBAAT,CAA4B,QAAQ,KAApC;;AAEA,QAAQ,KAAR,CAAc,EAAd,CAAiB,UAAjB,EAA6B,cAAc,KAAd,CAA7B;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,YAAM;AACpB,KAAM,QAAQ,MAAM,QAAN,EAAd;AACA,SAAQ,GAAR,YAAqB,MAAM,IAAN,CAAW,CAAX,EAAc,MAAnC;AACA,CAHD;;AAKA,SAAS,aAAT,CAAwB,KAAxB,EAA+B;AAC9B,QAAO,UAAC,GAAD,EAAM,GAAN,EAAc;AACpB,QAAM,QAAN,CAAe,EAAE,MAAM,OAAR,EAAiB,OAAO,GAAxB,EAA6B,QAA7B,EAAf;;AADoB,wBAEQ,MAAM,QAAN,EAFR;;AAAA,MAEZ,KAFY,mBAEZ,KAFY;AAAA,MAEL,QAFK,mBAEL,QAFK;;AAGpB,MAAI,UAAU,SAAS,MAAvB,EAA+B;AAC9B;AACA;AACD,EAND;AAOA;;AAED,SAAS,MAAT,OAAsC;AAAA,KAAnB,KAAmB,QAAnB,KAAmB;AAAA,KAAZ,QAAY,QAAZ,QAAY;;AACrC,oBAAS,SAAT,CAAmB,QAAQ,MAA3B,EAAmC,CAAnC;AACA,oBAAS,QAAT,CAAkB,QAAQ,MAA1B,EAAkC,CAAlC;AACA,KAAM,UAAW,UAAU,SAAS,MAApB,GAA8B,MAA9B,GAAuC,EAAvD;AACA,KAAM,SAAS,SAAS,IAAT,GAAgB,KAAhB,GAAwB,OAAvC;AACA,SAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB;AACA;;AAED,SAAS,gBAAT,GAA6B;AAAA,wBACX,MAAM,QAAN,EADW;;AAAA,KACpB,IADoB,oBACpB,IADoB;;AAE5B,KAAM,iBAAiB,KAAK,KAAL,CAAW,KAAK,CAAL,EAAQ,MAAR,GAAiB,KAAK,MAAL,EAA5B,CAAvB;AACA,OAAM,QAAN,CAAe;AACd,QAAM,eADQ;AAEd,YAAU,KAAK,CAAL,EAAQ,cAAR;AAFI,EAAf;AAIA;;;AAGD","file":"index.js","sourcesContent":["import { createStore } from 'redux'\nimport readline from 'readline'\nimport reducer from './reducer.js'\n\nconst store = createStore(reducer)\n\nstore.subscribe(() => {\n\trender(store.getState())\n})\n\n// set up console\nconst rl = readline.createInterface(process.stdin, process.stdout)\nreadline.emitKeypressEvents(process.stdin)\n\nprocess.stdin.on('keypress', registerInput(store))\nrl.on('close', () => {\n\tconst state = store.getState()\n\tconsole.log(`\\nGot ${state.bins[1].length} correct ones.`)\n})\n\nfunction registerInput (store) {\n\treturn (str, key) => {\n\t\tstore.dispatch({ type: 'INPUT', input: str, key })\n\t\tconst { input, question } = store.getState()\n\t\tif (input === question.answer) {\n\t\t\tpickNextQuestion()\n\t\t}\n\t}\n}\n\nfunction render ({ input, question }) {\n\treadline.clearLine(process.stdout, 0)\n\treadline.cursorTo(process.stdout, 0)\n\tconst correct = (input === question.answer) ? ' âœ“\\n' : ''\n\tconst output = question.text + input + correct\n\tprocess.stdout.write(output)\n}\n\nfunction pickNextQuestion () {\n\tconst { bins } = store.getState()\n\tconst randomQuestion = Math.floor(bins[0].length * Math.random())\n\tstore.dispatch({\n\t\ttype: 'PICK_QUESTION',\n\t\tquestion: bins[0][randomQuestion]\n\t})\n}\n\n// start game\npickNextQuestion()\n"]}