{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAM,QAAQ,0CAAd;;AAEA,MAAM,SAAN,CAAgB,YAAM;AACrB,QAAO,MAAM,QAAN,EAAP;AACA,CAFD;;;AAKA,IAAI,QAAQ,KAAR,CAAc,KAAlB,EAAyB;;AAExB,SAAQ,KAAR,CAAc,UAAd,CAAyB,IAAzB;AACA;AACD,mBAAS,kBAAT,CAA4B,QAAQ,KAApC;;AAEA,QAAQ,KAAR,CAAc,EAAd,CAAiB,UAAjB,EAA6B,iCAAa,KAAb,CAA7B;AACA,QAAQ,KAAR,CAAc,EAAd,CAAiB,UAAjB;AACA,QAAQ,EAAR,CAAW,QAAX,EAAqB,KAAK,KAAL,CAArB;;;AAGA,MAAM,QAAN,CAAe;AACd,OAAM,MADQ;AAEd,OAAM;AACL,QAAM;AADD;AAFQ,CAAf;;AAOA,SAAS,MAAT,OAAwD;AAAA,KAArC,IAAqC,QAArC,IAAqC;AAAA,KAA/B,KAA+B,QAA/B,KAA+B;AAAA,KAAxB,QAAwB,QAAxB,QAAwB;AAAA,KAAd,IAAc,QAAd,IAAc;AAAA,KAAR,IAAQ,QAAR,IAAQ;;AACvD,oBAAS,SAAT,CAAmB,QAAQ,MAA3B,EAAmC,CAAnC;AACA,oBAAS,QAAT,CAAkB,QAAQ,MAA1B,EAAkC,CAAlC;;AAEA,KAAI,eAAJ;AACA,SAAQ,IAAR;AACC,OAAK,MAAL;AACC,YAAS,KAAK,IAAd;AACA;AACD,OAAK,MAAL,C;AACA,OAAK,UAAL;AACC,OAAM,UAAW,UAAU,SAAS,MAApB,GAA8B,MAA9B,GAAuC,EAAvD;AACA,YAAS,SAAS,IAAT,GAAgB,KAAhB,GAAwB,OAAjC;AACA;AACD;AACC,YAAS,EAAT;AAVF;AAYA,SAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB;AACA;;AAED,SAAS,IAAT,CAAe,KAAf,EAAsB;AACrB,QAAO,YAAM;AACZ,MAAM,IAAI,MAAM,QAAN,GAAiB,IAAjB,CAAsB,CAAtB,EAAyB,MAAnC;AACA,UAAQ,GAAR,YAAqB,CAArB,iBAAkC,IAAI,CAAL,GAAU,OAAV,GAAoB,EAArD;AACA,UAAQ,IAAR;AACA,EAJD;AAKA","file":"index.js","sourcesContent":["import { createStore } from 'redux'\nimport readline from 'readline'\nimport reducer from './reducer.js'\nimport { inputHandler, listenForCtrlC } from './inputHandlers.js'\n\nconst store = createStore(reducer)\n\nstore.subscribe(() => {\n\trender(store.getState())\n})\n\n// set up console\nif (process.stdin.isTTY) {\n\t// not TTY if spawn from another node process\n\tprocess.stdin.setRawMode(true)\n}\nreadline.emitKeypressEvents(process.stdin)\n\nprocess.stdin.on('keypress', inputHandler(store))\nprocess.stdin.on('keypress', listenForCtrlC)\nprocess.on('SIGINT', exit(store))\n\n// start game\nstore.dispatch({\n\ttype: 'INFO',\n\tinfo: {\n\t\ttext: 'Velkommen!\\nFør vi starter, skal vi ta en test for å se hvor rask du er.\\nTrykk på en knapp for å fortsette.'\n\t}\n})\n\nfunction render ({ mode, input, question, info, test }) {\n\treadline.clearLine(process.stdout, 0)\n\treadline.cursorTo(process.stdout, 0)\n\t// console.log(store.getState())\n\tlet output\n\tswitch (mode) {\n\t\tcase 'info':\n\t\t\toutput = info.text\n\t\t\tbreak\n\t\tcase 'test':  // same as question\n\t\tcase 'question':\n\t\t\tconst correct = (input === question.answer) ? ' ✓\\n' : ''\n\t\t\toutput = question.text + input + correct\n\t\t\tbreak\n\t\tdefault:\n\t\t\toutput = ''\n\t}\n\tprocess.stdout.write(output)\n}\n\nfunction exit (store) {\n\treturn () => {\n\t\tconst l = store.getState().bins[1].length\n\t\tconsole.log(`\\nGot ${l} correct${(l > 1) ? ' ones' : ''}.`)\n\t\tprocess.exit()\n\t}\n}\n"]}