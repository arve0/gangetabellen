{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAM,QAAQ,0CAAd;;AAEA,MAAM,SAAN,CAAgB,YAAM;AACrB,QAAO,MAAM,QAAN,EAAP;AACA,CAFD;;;AAKA,IAAM,KAAK,mBAAS,eAAT,CAAyB,QAAQ,KAAjC,EAAwC,QAAQ,MAAhD,CAAX;AACA,mBAAS,kBAAT,CAA4B,QAAQ,KAApC;;AAEA,QAAQ,KAAR,CAAc,EAAd,CAAiB,UAAjB,EAA6B,cAAc,KAAd,CAA7B;AACA,GAAG,EAAH,CAAM,OAAN,EAAe,YAAM;AACpB,KAAM,QAAQ,MAAM,QAAN,EAAd;AACA,SAAQ,GAAR,YAAqB,MAAM,IAAN,CAAW,CAAX,EAAc,MAAnC;AACA,CAHD;;AAKA,SAAS,aAAT,CAAwB,KAAxB,EAA+B;AAC9B,QAAO,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,wBACH,MAAM,QAAN,EADG;;AAAA,MACZ,IADY,mBACZ,IADY;;AAEpB,MAAI,SAAS,MAAb,EAAqB;AACpB;AACA,GAFD,MAEO;AACN,SAAM,QAAN,CAAe,EAAE,MAAM,OAAR,EAAiB,OAAO,GAAxB,EAA6B,QAA7B,EAAf;;AADM,0BAEsB,MAAM,QAAN,EAFtB;;AAAA,OAEE,KAFF,oBAEE,KAFF;AAAA,OAES,QAFT,oBAES,QAFT;;AAGN,OAAI,UAAU,SAAS,MAAvB,EAA+B;AAC9B;AACA;AACD;AACD,EAXD;AAYA;;AAED,SAAS,gBAAT,GAA6B;AAAA,wBACX,MAAM,QAAN,EADW;;AAAA,KACpB,IADoB,oBACpB,IADoB;;AAE5B,KAAM,iBAAiB,KAAK,KAAL,CAAW,KAAK,CAAL,EAAQ,MAAR,GAAiB,KAAK,MAAL,EAA5B,CAAvB;AACA,OAAM,QAAN,CAAe;AACd,QAAM,UADQ;AAEd,YAAU,KAAK,CAAL,EAAQ,cAAR;AAFI,EAAf;AAIA;;;AAGD,MAAM,QAAN,CAAe;AACd,OAAM,MADQ;AAEd,OAAM;AACL,QAAM;AADD;AAFQ,CAAf;;AAOA,SAAS,MAAT,OAAkD;AAAA,KAA/B,IAA+B,QAA/B,IAA+B;AAAA,KAAzB,KAAyB,QAAzB,KAAyB;AAAA,KAAlB,QAAkB,QAAlB,QAAkB;AAAA,KAAR,IAAQ,QAAR,IAAQ;;AACjD,oBAAS,SAAT,CAAmB,QAAQ,MAA3B,EAAmC,CAAnC;AACA,oBAAS,QAAT,CAAkB,QAAQ,MAA1B,EAAkC,CAAlC;;AAEA,KAAI,eAAJ;AACA,KAAI,SAAS,UAAb,EAAyB;AACxB,MAAM,UAAW,UAAU,SAAS,MAApB,GAA8B,MAA9B,GAAuC,EAAvD;AACA,WAAS,SAAS,IAAT,GAAgB,KAAhB,GAAwB,OAAjC;AACA,EAHD,MAGO;AACN,WAAS,KAAK,IAAd;AACA;AACD,SAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB;AACA","file":"index.js","sourcesContent":["import { createStore } from 'redux'\nimport readline from 'readline'\nimport reducer from './reducer.js'\n\nconst store = createStore(reducer)\n\nstore.subscribe(() => {\n\trender(store.getState())\n})\n\n// set up console\nconst rl = readline.createInterface(process.stdin, process.stdout)\nreadline.emitKeypressEvents(process.stdin)\n\nprocess.stdin.on('keypress', registerInput(store))\nrl.on('close', () => {\n\tconst state = store.getState()\n\tconsole.log(`\\nGot ${state.bins[1].length} correct ones.`)\n})\n\nfunction registerInput (store) {\n\treturn (str, key) => {\n\t\tconst { mode } = store.getState()\n\t\tif (mode === 'info') {\n\t\t\tpickNextQuestion()\n\t\t} else {\n\t\t\tstore.dispatch({ type: 'INPUT', input: str, key })\n\t\t\tconst { input, question } = store.getState()\n\t\t\tif (input === question.answer) {\n\t\t\t\tpickNextQuestion()\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction pickNextQuestion () {\n\tconst { bins } = store.getState()\n\tconst randomQuestion = Math.floor(bins[0].length * Math.random())\n\tstore.dispatch({\n\t\ttype: 'QUESTION',\n\t\tquestion: bins[0][randomQuestion]\n\t})\n}\n\n// start game\nstore.dispatch({\n\ttype: 'INFO',\n\tinfo: {\n\t\ttext: 'Velkommen. Før vi starter, skal vi ta en test for å se hvor rask du er. Trykk på en knapp for å fortsette.'\n\t}\n})\n\nfunction render ({ mode, input, question, info }) {\n\treadline.clearLine(process.stdout, 0)\n\treadline.cursorTo(process.stdout, 0)\n\t// console.log(store.getState())\n\tlet output\n\tif (mode === 'question') {\n\t\tconst correct = (input === question.answer) ? ' ✓\\n' : ''\n\t\toutput = question.text + input + correct\n\t} else {\n\t\toutput = info.text\n\t}\n\tprocess.stdout.write(output)\n}\n"]}